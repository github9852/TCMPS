
# 删除当前工作空间中的所有变量  
rm(list=ls())
############################################################################################################ 安装和加载包
install.packages("readxl")
install.packages("pbapply")
install.packages("ggplot2")

library(readxl)
library(pbapply)
library(ggplot2)


############################################################################################################ 加载文件及设定参数
# 设定药柜为18列10行的矩阵,分为2层
nrow <- 10
ncol <- 18
ceng <- 2
#加载权重（频率）EXCEL数据,中药的数量一定为nrow*ncol*ceng=360
weight_data <- read_excel("360种中药权重.xlsx")
#加载相关系数EXCEL数据
correlation_matrix <- read_excel("correlation.xlsx")

#设定权重（频率）和相关系数的参数占比
#关联度系数
correlation_weight <- 0.5
#路径系数
distances_weight <- 0.5

#查看前5行导入的数据
head(weight_data)
head(correlation_matrix)


############################################################################################################ 相关系数和权重系数转化为数据矩阵
correlation_matrix <- as.matrix(correlation_matrix)
#设置行名为第一列的信息
rowname <- correlation_matrix[,1]
#删除第一列
correlation_matrix<-correlation_matrix[,-1]
#设置行名为第一列的信息
rownames(correlation_matrix)<-rowname

#权重转化为数据矩阵
weight_data <- as.matrix(weight_data)
# 查看前5行
head(correlation_matrix)
head(weight_data)


############################################################################################################ 初始化中药位置
# 获取中药名数据
ZY <- weight_data[,1]
# 将weight_data的第1列提取出来
ZY <- apply(weight_data, 1, function(x) x[1])
# 拆分数据集
# 设置随机种子，确保结果可重复  
set.seed(123)
# 随机选择ceng部分的索引
indices <- sample(1:length(ZY), length(ZY) / ceng)
# 创建ZY1数据集   
ZY1 <- ZY[indices]
# 创建ZY2数据集  
ZY2 <- ZY[-indices]
# 创建ceng个二维矩阵  
ZY_matrix1 <- matrix(ZY1, nrow, ncol, byrow = TRUE)
ZY_matrix2 <- matrix(ZY2, nrow, ncol, byrow = TRUE)
# 合并为中药三维矩阵
ZY_position <- array(c(ZY_matrix1, ZY_matrix2), dim = c(nrow(ZY_matrix1), ncol(ZY_matrix1), ceng))
# 打印中药三维矩阵 
print(ZY_position)




############################################################################################################ 计算药柜中每个盒子到中心点的距离参数
# 创建一个8列12行的矩阵,分为2层
matrix <- matrix(NA, nrow, ncol)  
# 初始化距离矩阵
distances_matrix <- matrix(NA, nrow = nrow(matrix), ncol = ncol(matrix))
# 计算每个点到中心点的距离
for (i in 1:nrow(matrix)) {
  for (j in 1:ncol(matrix)) { 
    # 计算当前点到中心点的距离  
    distances_matrix[i, j] <- abs(j - (ncol(matrix) + 1) / 2) + abs(i - (nrow(matrix) + 1) / 2)  
  }  
}

# 打印距离矩阵,即每个坐标到矩阵中心的距离
print(distances_matrix)


################################################################################################# 根据所有中药位置映射所有对应的权重(频率)函数
ZY_weight_value <- function(weight_data, ZY_position) {
# 创建一个与ZY_position相同大小的空矩阵
ZY_weight<-apply(ZY_position, c(1, 2, 3), function(x) rep(NA_real_, length(x)))
# 迭代weight_data的每一行  
for(i in 1:nrow(weight_data)){  
  # 获取ZY及对应的值
  ZY <- weight_data[i,1]
  weight <- as.numeric(weight_data[i,2])
  # 根据ZY值获取ZY_position中的行号
  # 在三维矩阵中查找目标文本并计算位置坐标
  col <- which(apply(ZY_position, 1, function(x) any(x == ZY)))   
  row <- which(apply(ZY_position, 2, function(x) any(x == ZY)))  
  depth <- which(apply(ZY_position, 3, function(x) any(x == ZY)))
  position <- c(col, row, depth)
  ZY_weight[col, row, depth]<-weight
}
return(ZY_weight)
}

############################################################################################################ 根据单一中药位置映射对应的权重(频率)函数
ZY_weight_single_value <- function(weight_data, ZY) {
  # 获取ZY及对应的值
  weight <- as.numeric(weight_data[,2][weight_data == ZY])
  return(weight)
}




######################################################################################################## 随机交换两个中药的位置
position_move <- function(ZY_position) {
# 生成行列层数个随机索引
random_nrow_1 <- sample(1:nrow(ZY_position), 1) # 随机选择行  
random_ncol_1 <- sample(1:ncol(ZY_position), 1) # 随机选择列
random_ceng_1 <- sample(c(1, 2), 1)# 随机选择层数，1或者2
random_nrow_2 <- sample(1:nrow(ZY_position), 1) # 随机选择行  
random_ncol_2 <- sample(1:ncol(ZY_position), 1) # 随机选择列
random_ceng_2 <- sample(c(1, 2), 1)# 随机选择层数，1或者2
#cat("交换的行列层坐标",random_nrow_1, random_ncol_1, random_ceng_1, random_nrow_2, random_ncol_2, random_ceng_2)
temp1 <- ZY_position[random_nrow_1, random_ncol_1, random_ceng_1]
temp2 <- ZY_position[random_nrow_2, random_ncol_2, random_ceng_2]
ZY_position[random_nrow_1, random_ncol_1, random_ceng_1] <- temp2
ZY_position[random_nrow_2, random_ncol_2, random_ceng_2] <- temp1
# 返回新的中药位置矩阵
ZY_position <- ZY_position
return(list(ZY_position, random_nrow_1, random_ncol_1, random_ceng_1, random_nrow_2, random_ncol_2, random_ceng_2, temp1, temp2))
}


############################################################################################################ 计算所有相邻的中药名单
ZY_neighbors <- function(random_nrow, random_ncol, random_ceng, ZY_position) {
# 计算变动的中药相邻的坐标
if(random_nrow==1){
  x_neighbors <- c(random_nrow, random_nrow+1)
} else if(random_nrow==nrow){
  x_neighbors <- c(random_nrow-1, random_nrow)
} else{
  x_neighbors <- c(random_nrow-1, random_nrow, random_nrow+1)
}

if(random_ncol==1){
  y_neighbors <- c(random_ncol, random_ncol+1)
} else if(random_ncol==ncol){
  y_neighbors <- c(random_ncol-1, random_ncol)
} else {
  y_neighbors <- c(random_ncol-1, random_ncol, random_ncol+1)
}

z_neighbors <- c(1, 2)
# 提取邻居的值,但会包含本身输入的值，此时neighbors为三维数据矩阵
neighbors <- ZY_position[x_neighbors, y_neighbors, z_neighbors]
# 去除自身的值，此时变为一维数据集neighbors1
neighbors <- neighbors[-which(neighbors == ZY_position[random_nrow, random_ncol, random_ceng])] 
return(neighbors)
}

############################################################################################################ 计算下侧和右侧相邻的中药名单
ZY_neighbors_down_right <- function(random_nrow, random_ncol, random_ceng, ZY_position) {
# 计算变动的中药相邻的坐标
if(random_nrow==nrow){
  x_neighbors <- c(random_nrow)
} else{
  x_neighbors <- c(random_nrow, random_nrow+1)
}

if(random_ncol==ncol){
  y_neighbors <- c(random_ncol)
} else {
  y_neighbors <- c(random_ncol, random_ncol+1)
}

z_neighbors <- c(1, 2)
# 提取邻居的值,但会包含本身输入的值，此时neighbors为三维数据矩阵
neighbors <- ZY_position[x_neighbors, y_neighbors, z_neighbors]
# 去除自身的值，此时变为一维数据集neighbors1
neighbors <- neighbors[-which(neighbors == ZY_position[random_nrow, random_ncol, random_ceng])] 
return(neighbors)
}




#########################################################################################################计算单一中药与相邻中药之间的相关系数总和
ZY_correlation_value_sum <- function(ZY, neighbors, correlation_matrix) {
ZY_correlation_value <- numeric()
# 计算ZY与相邻中药的相关系数
for(i in 1:length(neighbors)){
  ZY_correlation_value[i] <- correlation_matrix[ZY,neighbors[i]]
}
ZY_correlation_value <- as.numeric(ZY_correlation_value)
# 计算相关系数总和
ZY_correlation_value <- sum(ZY_correlation_value)
return(ZY_correlation_value)
}


####################################################################################################### #计算每个中药与下侧和右侧相邻中药的相关系数总和
ZY_correlation_sum <- function(ZY_position, correlation_matrix) {
ZY_correlation <- array(0, dim = c(nrow, ncol, ceng)) 
for (i in 1:nrow) {
  for (j in 1:ncol) {
    for (k in 1:ceng) {
	  #计算中药相邻有哪些
	  neighbors<-ZY_neighbors_down_right(i, j, k, ZY_position)
	  #计算每个中药与相邻中药的相关系数总和
	  ZY <- ZY_position[i, j, k]
	  ZY_correlation[i, j, k] <- ZY_correlation_value_sum(ZY, neighbors, correlation_matrix)
	}
  }
}
# 计算 ZY_distances 中所有元素的和  
ZY_correlation <- sum(ZY_correlation)  
# 输出结果  
# print(ZY_correlation)
}


########################################################################################## 计算中药变化前后到中心距离的加权变化，计算的变化前后的差值
calculate_distances_value <- function(random_nrow_1, random_ncol_1,random_nrow_2, random_ncol_2, ZY1 ,ZY2 ,weight_data, distances_matrix) {
# 将 ZY_weight 和 distances_matrix 的对应元素相乘
ZY1_weight <- ZY_weight_single_value(weight_data, ZY1)
#cat("ZY1_weight",ZY1_weight)
temp1_distances_qian <- ZY1_weight* distances_matrix[random_nrow_1, random_ncol_1]
#cat("ZY1变化前距离",temp1_distances_qian)
temp1_distances_hou <- ZY1_weight* distances_matrix[random_nrow_2, random_ncol_2]
#cat("ZY1变化后距离",temp1_distances_hou)
ZY2_weight <- ZY_weight_single_value(weight_data, ZY2)
#cat("ZY2_weight",ZY2_weight)
temp2_distances_qian <- ZY2_weight * distances_matrix[random_nrow_2, random_ncol_2]
#cat("ZY2变化前距离",temp2_distances_qian)
temp2_distances_hou <- ZY2_weight * distances_matrix[random_nrow_1, random_ncol_1]
#cat("ZY2变化后距离",temp2_distances_hou)
distances <- (temp1_distances_hou + temp2_distances_hou - temp1_distances_qian - temp2_distances_qian)
#cat("距离差",distances)
return(distances)
}



############################################################################################################ 计算每个中药到中心距离的总和
calculate_distances_sum <- function(ZY_weight, distances_matrix) {
# 创建三维数组，所有元素初始化为0  
ZY_distances <- array(0, dim = c(nrow, ncol, ceng))
# 将 ZY_weight 和 distances_matrix 的对应元素相乘，并将结果存储到 result_matrix 的相应位置  
for (i in 1:nrow) {
  for (j in 1:ncol) {
    for (k in 1:ceng) {
      ZY_distances[i, j, k] <- ZY_weight[i, j, k] * distances_matrix[i, j]  
	}
  }
}
# 计算 ZY_distances 中所有元素的和  
ZY_distances_sum <- sum(ZY_distances)  
# 输出结果  
# print(sum_result_matrix)
}



############################################################################################## 模拟退火算法，计算所有中药与相邻中药关联度总和最大排列
simulated_annealing_correlation_sum_max <- function(correlation_matrix, ZY_position, num_iterations, cooling_rate) {
  #计时 
  system.time({
  # 初始化
  current_positions <- ZY_position
  # 计算初始关联度
  current_value <- ZY_correlation_sum(current_positions, correlation_matrix)
  # 创建空数据框
  results <- data.frame(iteration = numeric(num_iterations),  
                       current_value = numeric(num_iterations),
                       current_positions = matrix(NA, nrow = num_iterations, ncol = nrow(ZY_position)))
  # 退火过程
  progress <- 0
  for (i in 1:num_iterations) {
    ZY_position_result <- position_move(current_positions) # 尝试随机交换两个位置
    new_ZY_position <- ZY_position_result[[1]]
    new_value <- ZY_correlation_sum(new_ZY_position, correlation_matrix) # 计算新的关联值
    
    # 如果新的值更好，或者满足Metropolis准则，接受新的位置
    if (new_value > current_value || exp((new_value-current_value) / cooling_rate) > runif(1)) {
      current_positions <- new_ZY_position
      current_value <- new_value
    }
	
    # 记录数据
    results$iteration[i] <- i
    results$current_value[i] <- current_value
    results$current_positions[[i]] <- current_positions
	progress <- progress + 1  
    cat("进度：", progress, "/", num_iterations, "\n") 
    # 降低温度  
    cooling_rate <- cooling_rate * 0.99
  }
  
  # 返回结果列表
  return(results)
  })
}

# 调用模拟退火算法并输出结果，运行10万次，3519秒 1 万次 229秒
result_correlation_max <- simulated_annealing_correlation_sum_max(correlation_matrix, ZY_position, num_iterations = 100000, cooling_rate = 0.000001)

# 保存结果
result_correlation_max <- result_correlation_max[, c(1, 2, 13)]

#最大值
max(result_correlation_max$current_value)
#最大值所在的行数
result_correlation_max_index <- which.max(result_correlation_max$current_value)
#最大值对应的中药排列摆放方式
result_correlation_max$current_positions[result_correlation_max_index]

#如果继续运行，则设定ZY_position为最大值方案
ZY_position<-result_correlation_max$current_positions[result_correlation_max_index][[1]]

ZY_position_correlation_max<-result_correlation_max$current_positions[result_correlation_max_index][[1]]


# 保存  
save(ZY_position, file = "ZY_position.RData") 
# 加载  
load("ZY_position.RData")
# 保存为CSV  
write.csv(ZY_position, file = "ZY_position.csv")


ggplot(data = result_correlation_max, aes(x = iteration, y = current_value, group = 1)) +  
    geom_line() +  
    labs(x = "X-axis label", y = "Y-axis label")
	
# 循环运行函数  
for (i in 1:50) {
  i<i+1
  result_correlation_max <- simulated_annealing_correlation_sum_max(correlation_matrix, ZY_position, num_iterations = 5000, cooling_rate = 0.99)
  esult_correlation_max <- result_correlation_max[, c(1, 2, 13)]
  ZY_position<-result_correlation_max$current_positions[result_correlation_max_index][[1]]
}

############################################################################################## 模拟退火算法，计算所有中药与相邻中药关联度总和最小排列
simulated_annealing_correlation_sum_min <- function(correlation_matrix, ZY_position, num_iterations, cooling_rate) {
  #计时 
  system.time({
  # 初始化
  current_positions <- ZY_position
  # 计算初始关联度
  current_value <- ZY_correlation_sum(current_positions, correlation_matrix)
  # 创建空数据框
  results <- data.frame(iteration = numeric(num_iterations),  
                       current_value = numeric(num_iterations),
                       current_positions = matrix(NA, nrow = num_iterations, ncol = nrow(ZY_position)))
  # 退火过程
  progress <- 0
  for (i in 1:num_iterations) {
    ZY_position_result <- position_move(ZY_position) # 尝试随机交换两个位置
    new_ZY_position <- ZY_position_result[[1]]
    new_value <- ZY_correlation_sum(new_ZY_position, correlation_matrix) # 计算新的关联值
    
    # 如果新的值更好，或者满足Metropolis准则，接受新的位置
    if (new_value < current_value || exp((current_value - new_value) / cooling_rate) > runif(1)) {
      current_positions <- new_ZY_position
      current_value <- new_value
    }
	
    # 记录数据
    results$iteration[i] <- i
    results$current_value[i] <- current_value
    results$current_positions[[i]] <- current_positions
	progress <- progress + 1  
    cat("进度：", progress, "/", num_iterations, "\n") 
    # 降低温度  
    cooling_rate <- cooling_rate * 0.99
  }
  
  # 返回结果列表
  return(results)
  })
}

# 调用模拟退火算法并输出结果，运行10万次，1000秒
result_correlation_min <- simulated_annealing_correlation_sum_min(correlation_matrix, ZY_position, num_iterations = 5000, cooling_rate = 0.99)

# 保存结果
result_correlation_min <- result_correlation_min[, c(1, 2, 13)]

#最小值
min(result_correlation_min$current_value)
#最小值所在的行数
result_correlation_min_index <- which.min(result_correlation_min$current_value)
#最小值对应的中药排列摆放方式
result_correlation_min$current_positions[result_correlation_min_index]

#如果继续运行，则设定ZY_position为最小值方案
ZY_position<-result_correlation_min$current_positions[result_correlation_min_index][[1]]

ZY_position_correlation_min<-result_correlation_min$current_positions[result_correlation_min_index][[1]]

#绘制变化图
ggplot(data = result_correlation_min, aes(x = iteration, y = current_value, group = 1)) +  
    geom_line() +  
    labs(x = "X-axis label", y = "Y-axis label")
	
# 循环运行函数  
for (i in 1:20) {
  i<i+1
  result_correlation_min <- simulated_annealing_correlation_sum_min(correlation_matrix, ZY_position, num_iterations = 5000, cooling_rate = 0.99)
  result_correlation_min <- result_correlation_min[, c(1, 2, 13)]
  ZY_position<-result_correlation_min$current_positions[result_correlation_min_index][[1]]
}

################################################################################################################## 计算变量参数

#将权重数据按从大到小排列
weight_data_sorted <- weight_data[order(weight_data[,2], decreasing = TRUE), ]
# 创建一个8列12行的矩阵,分为2层
matrix <- matrix(NA, nrow, ncol)


# 距离矩阵为2层，合并为三维矩阵
distances <- array(c(distances_matrix, distances_matrix), dim = c(nrow(distances_matrix), ncol(distances_matrix), ceng))
#将之前的距离矩阵变为二维矩阵
distances <- c(distances)

#将距离从大到小排列
sorted_distances_max <- sort(distances, decreasing = TRUE)
#从小到大排列
sorted_distances_min <- sort(distances)

#转化为数据表
weight_data_sorted <- data.frame(weight_data_sorted, sorted_distances_max)
# 重命名weight_data_sorted数据集的第三列为"距离从大到小"  
names(weight_data_sorted)[3] <- "距离大到小"

weight_data_sorted<-data.frame(weight_data_sorted, sorted_distances_min)
names(weight_data_sorted)[4] <- "距离小到大"

weight_data_sorted[,2] <- as.numeric(weight_data_sorted[,2])  
weight_data_sorted[,3] <- as.numeric(weight_data_sorted[,3]) 
weight_data_sorted[,4] <- as.numeric(weight_data_sorted[,4])

weight_data_sorted[,5] <- weight_data_sorted[,2]*weight_data_sorted[,3]
names(weight_data_sorted)[5] <- "最远路径排列"
weight_data_sorted[,6] <- weight_data_sorted[,2]*weight_data_sorted[,4]
names(weight_data_sorted)[6] <- "最近路径排列"

#最远路径总和
distances_max <- sum(weight_data_sorted[,5])
#distances_max <- 10.91183
#最近路径总和
distances_min <- sum(weight_data_sorted[,6])
#distances_min <- 3.088168

#路径差
distances_subtract <- distances_max - distances_min

#最小关联度
correlation_min <- min(result_correlation_min$current_value)
#correlation_min <- 0.0660315
#最大关联度
correlation_max <- max(result_correlation_max$current_value)
#correlation_max <- 14.21045
#关联度差
correlation_subtract <- correlation_max - correlation_min



###################################################################################################### 结合路径和关联度计算最佳排列计算公式
Best_value <- function(correlation_max, correlation_subtract, correlation_weight, distances_min, distances_subtract, distances_weight, correlation_value, distances_value){
value <- (correlation_max-correlation_value)/correlation_subtract*correlation_weight+(distances_value-distances_min)/distances_subtract*distances_weight
return(value)
}

############################################################################################################ 模拟退火算法，结合路径和关联度计算最佳排列
simulated_annealing_Best <- function(correlation_matrix, ZY_position, num_iterations, cooling_rate) {
  #计时
  system.time({
  # 初始化
  current_positions <- ZY_position
  
  # 计算初始关联度
  correlation_value <- ZY_correlation_sum(current_positions, correlation_matrix)
  
  # 映射为中药权重（频率）
  current_weight <- ZY_weight_value(weight_data, ZY_position)
  
  # 计算初始距离
  distances_value <- calculate_distances_sum(current_weight, distances_matrix)
  
  #计算初始组合值
  current_value <- Best_value(correlation_max, correlation_subtract, correlation_weight, distances_min, distances_subtract, distances_weight, correlation_value, distances_value)
  
  # 创建空数据框
  results <- data.frame(iteration = numeric(num_iterations),
                       current_value = numeric(num_iterations),
					   correlation_value = numeric(num_iterations),
					   distances_value = numeric(num_iterations),
                       current_positions = matrix(NA, nrow = num_iterations, ncol = nrow(ZY_position)))
  # 退火过程
  progress <- 0
  for (i in 1:num_iterations) {
    ZY_position_result <- position_move(current_positions) # 尝试随机交换两个位置
    new_ZY_position <- ZY_position_result[[1]]
	
	# 计算新的关联值
    new_correlation_value <- ZY_correlation_sum(new_ZY_position, correlation_matrix)
	
	# 计算两个交换位置后到中心点的距离差
	distances <- calculate_distances_value(ZY_position_result[[2]], ZY_position_result[[3]], ZY_position_result[[5]], ZY_position_result[[6]],  ZY_position_result[[8]], ZY_position_result[[9]], weight_data, distances_matrix)
	# 初始距离加上变化后的距离
	new_distances_value <- distances_value+distances
    
	#计算组合值
	new_value <- Best_value(correlation_max, correlation_subtract, correlation_weight, distances_min, distances_subtract, distances_weight,  new_correlation_value, new_distances_value)
	
    # 如果新的值更好，或者满足Metropolis准则，接受新的位置
    if (new_value < current_value || exp((current_value - new_value) / cooling_rate) > runif(1)) {
      current_positions <- new_ZY_position
      current_value <- new_value
	  distances_value <- new_distances_value
	  correlation_value <- new_correlation_value
    }
	
    # 记录数据
    results$iteration[i] <- i
    results$current_value[i] <- current_value
	results$correlation_value[i] <- correlation_value
	results$distances_value[i] <- distances_value
    results$current_positions[[i]] <- current_positions
	progress <- progress + 1  
    cat("进度：", progress, "/", num_iterations, "\n") 
    # 降低温度  
    cooling_rate <- cooling_rate * 0.99
  }
  
  # 返回结果列表
  return(results)
  })
}
)}

# 调用模拟退火算法并输出结果,十万次800秒
result_Best <- simulated_annealing_Best(correlation_matrix, ZY_position, num_iterations = 100000, cooling_rate = 100)


# 保存结果
result_Best <- result_Best[, c(1, 2, 3, 4, 15)]

#最小值
min(result_Best$current_value)
#最小值所在的行数
result_Best_index <- which.min(result_Best$current_value)

#如果继续运行，则设定ZY_position为最小值方案
ZY_position<-result_Best$current_positions[result_Best_index][[1]]

ZY_position_Best<-result_Best$current_positions[result_Best_index][[1]]

#绘制变化图
ggplot(data = result_Best, aes(x = iteration, y = current_value, group = 1)) +  
    geom_line() +  
    labs(x = "X-axis label", y = "Y-axis label")



# 保存为CSV
result_Best_save <- result_Best[, c(1, 2, 3, 4)]
write.csv(result_Best_save, file = "最佳中药布局运行次数与结果.csv")
write.csv(ZY_position_Best, file = "ZY_position.csv")

#模拟退火算法继续运行
result_Best <- simulated_annealing_Best(correlation_matrix, ZY_position, num_iterations = 200000, cooling_rate = 0.000000001)


# 循环运行函数  
for (i in 1:20) {
  i<i+1
  result_correlation_min <- simulated_annealing_correlation_sum_min(correlation_matrix, ZY_position, num_iterations = 5000, cooling_rate = 0.99)
  result_correlation_min <- result_correlation_min[, c(1, 2, 13)]
  ZY_position<-result_correlation_min$current_positions[result_correlation_min_index][[1]]
}



######################################################################################################################数据验证

ZY_position_2022 <- read_excel("药房中药位置2022年.xlsx")
#数据拆分为两半
ZY_position_2022_1 <- ZY_position_2022[, 1:18]
ZY_position_2022_2 <- ZY_position_2022[, 19:36]

#转化为数据集
ZY_position_2022_1 <- as.matrix(ZY_position_2022_1)
ZY_position_2022_2 <- as.matrix(ZY_position_2022_2)

# 合并为中药三维矩阵
ZY_position_2022 <- array(data = c(ZY_position_2022_1, ZY_position_2022_2), dim = c(nrow, ncol, ceng))

ZY_position<-ZY_position_2022
> # 初始化
current_positions <- ZY_position

# 计算初始关联度
correlation_value <- ZY_correlation_sum（current_positions， correlation_matrix）

# 映射为中药权重（频率）
current_weight <- ZY_weight_value（weight_data， ZY_position）

# 计算初始距离
distances_value <- calculate_distances_sum（current_weight， distances_matrix）

#计算初始综合值
current_value <- Best_value（correlation_max、correlation_subtract、correlation_weight、distances_min、distances_subtract、distances_weight、correlation_value、distances_value）

#结果：初始关联度correlation_value：4.714272
#结果：初始距离distances_value：6.781048
#结果：初始综合值current_value：0.5716935



ZY_position_distance_min <- read_excel（“最近距离排列方案.xlsx”）
#数据拆分为两半
ZY_position_distance_min_1 <- ZY_position_distance_min[， 1：18]
ZY_position_distance_min_2 <- ZY_position_distance_min[， 19：36]
ZY_position_distance_min_1 <- as.matrix（ZY_position_distance_min_1）
ZY_position_distance_min_2 <- as.matrix（ZY_position_distance_min_2）
# 合并为中药三维矩阵
ZY_position_distance_min <- 数组（data = c（ZY_position_distance_min_1， ZY_position_distance_min_2）， dim = c（nrow， ncol， ceng））
current_positions <- ZY_position_distance_min
# 计算初始关联度
correlation_value <- ZY_correlation_sum（current_positions， correlation_matrix）
correlation_value
# 映射为中药权重（频率）
current_weight <- ZY_weight_value（weight_data， current_positions）
# 计算初始距离
distances_value <- calculate_distances_sum（current_weight， distances_matrix）
distances_value
